{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import React, \{ useState \} from "react";\
import \{ Calculator, FileText, DollarSign, TrendingUp, PieChart, Building, Receipt, Wallet, BarChart, X, Minimize2, Maximize2, Eye, LogOut, Users, Settings, Shield, User, Lock, Mail, RotateCcw, Download, Upload, FileSpreadsheet, Bot, Lightbulb \} from "lucide-react";\
\
//--- UTILITIES ---\
const sumFields = (obj, fields) => fields.reduce((sum, k) => sum + (+obj?.[k] || 0), 0);\
const currency = v => `PKR $\{(v || 0).toLocaleString()\}`;\
\
//--- TAX ENGINE ---\
const TaxEngine = \{\
  slabs: [\
    \{ min: 0, max: 600000, rate: 0 \},\
    \{ min: 600001, max: 1200000, rate: 0.05 \},\
    \{ min: 1200001, max: 2200000, rate: 0.15 \},\
    \{ min: 2200001, max: 3200000, rate: 0.25 \},\
    \{ min: 3200001, max: 4100000, rate: 0.30 \},\
    \{ min: 4100001, max: Infinity, rate: 0.35 \}\
  ],\
  calcNormalTax: income => \{\
    let tax = 0, prev = 0;\
    for (const \{ min, max, rate \} of TaxEngine.slabs) \{\
      if (income > min) \{\
        const upper = Math.min(income, max);\
        tax += (upper - prev) * rate;\
        prev = max;\
      \}\
    \}\
    return Math.round(tax);\
  \},\
  calcTaxCredit: (amt, income, percent) => (income ? amt * (TaxEngine.calcNormalTax(income) / income) * percent : 0),\
  calcFinalTax: (amt, rate) => amt * rate,\
\};\
\
//--- AI TAX ADVISOR ---\
const TaxAdvisor = \{\
  analyzeForSavings: (taxData) => \{\
    const suggestions = [];\
    const income = sumFields(taxData.income, ["monthlySalary", "bonus", "carAllowance", "otherTaxable"]);\
    \
    // Analyze charitable donations\
    if ((taxData.credits.charitableDonation || 0) < income * 0.05) \{\
      suggestions.push(\{\
        type: "donation",\
        title: "Increase Charitable Donations",\
        description: `Consider increasing donations up to 5% of income ($\{currency(income * 0.05)\}) for maximum tax credit`,\
        potential_saving: TaxEngine.calcTaxCredit(income * 0.05 - (taxData.credits.charitableDonation || 0), income, 1)\
      \});\
    \}\
    \
    // Analyze pension contributions\
    if ((taxData.credits.pensionContribution || 0) < Math.min(income * 0.20, 1500000)) \{\
      const maxContribution = Math.min(income * 0.20, 1500000);\
      suggestions.push(\{\
        type: "pension",\
        title: "Maximize Pension Contributions",\
        description: `Increase pension contribution to $\{currency(maxContribution)\} for tax benefits`,\
        potential_saving: TaxEngine.calcTaxCredit(maxContribution - (taxData.credits.pensionContribution || 0), income, 1)\
      \});\
    \}\
    \
    // Analyze medical allowance optimization\
    if ((taxData.income.medicalAllowance || 0) < Math.min(income * 0.10, 1000000)) \{\
      suggestions.push(\{\
        type: "medical",\
        title: "Optimize Medical Allowance",\
        description: "Negotiate higher medical allowance with employer - it's tax exempt",\
        potential_saving: "No additional tax on medical allowance"\
      \});\
    \}\
    \
    return suggestions;\
  \}\
\};\
\
//--- FILE OPERATIONS ---\
const FileOperations = \{\
  exportToExcel: (userData) => \{\
    // Simulate Excel export\
    const data = \{\
      user: userData.name,\
      email: userData.email,\
      taxData: userData.taxData,\
      exportDate: new Date().toISOString()\
    \};\
    \
    const blob = new Blob([JSON.stringify(data, null, 2)], \{ type: 'application/json' \});\
    const url = URL.createObjectURL(blob);\
    const a = document.createElement('a');\
    a.href = url;\
    a.download = `tax_return_$\{userData.name.replace(/\\s+/g, '_')\}.json`;\
    document.body.appendChild(a);\
    a.click();\
    document.body.removeChild(a);\
    URL.revokeObjectURL(url);\
  \},\
  \
  exportToPDF: (userData, taxSummary) => \{\
    // Simulate PDF export\
    const pdfContent = `\
Pakistani Tax Return Summary\
==============================\
Name: $\{userData.name\}\
Email: $\{userData.email\}\
Export Date: $\{new Date().toLocaleDateString()\}\
\
INCOME SUMMARY:\
- Total Income: $\{currency(taxSummary.totalIncome)\}\
- Taxable Income: $\{currency(taxSummary.taxableIncome)\}\
\
TAX CALCULATION:\
- Normal Tax: $\{currency(taxSummary.normalTax)\}\
- Total Tax Chargeable: $\{currency(taxSummary.totalTaxChargeable)\}\
- Tax Paid: $\{currency(taxSummary.taxPaid)\}\
- Refund/Demand: $\{currency(Math.abs(taxSummary.refundDemand))\}\
\
Generated by Pakistani Tax Advisor\
    `;\
    \
    const blob = new Blob([pdfContent], \{ type: 'text/plain' \});\
    const url = URL.createObjectURL(blob);\
    const a = document.createElement('a');\
    a.href = url;\
    a.download = `tax_return_$\{userData.name.replace(/\\s+/g, '_')\}.pdf`;\
    document.body.appendChild(a);\
    a.click();\
    document.body.removeChild(a);\
    URL.revokeObjectURL(url);\
  \},\
  \
  importFromFile: (file, onSuccess, onError) => \{\
    const reader = new FileReader();\
    reader.onload = (e) => \{\
      try \{\
        const data = JSON.parse(e.target.result);\
        if (data.taxData) \{\
          onSuccess(data.taxData);\
        \} else \{\
          onError("Invalid file format");\
        \}\
      \} catch (error) \{\
        onError("Error reading file: " + error.message);\
      \}\
    \};\
    reader.readAsText(file);\
  \}\
\};\
\
//--- DEFAULT TAX DATA ---\
const getDefaultTaxData = () => (\{\
  income: \{ monthlySalary: 0, bonus: 0, carAllowance: 0, otherTaxable: 0, salaryTaxDeducted: 0, multipleEmployer: "", additionalTaxDeducted: 0, medicalAllowance: 0, employerContribution: 0, otherExempt: 0, otherSources: 0 \},\
  adjustableTax: \{ profitOnDebt: 0, profitOnDebtTax: 0, electricityBill: 0, electricityTax: 0, phoneBill: 0, phoneTax: 0, vehicleAmount: 0, vehicleTax: 0, otherTax: 0 \},\
  reductions: \{ teacherAmount: 0, teacherReduction: 0, behboodReduction: 0 \},\
  credits: \{ charitableDonation: 0, pensionContribution: 0 \},\
  deductions: \{ zakat: 0 \},\
  finalTax: \{ sukukAmount: 0, debtAmount: 0 \},\
  capitalGain: \{ property1Year: 0, property1YearTaxDeducted: 0, property2_3Years: 0, property2_3YearsTaxDeducted: 0, securities: 0, securitiesTaxDeducted: 0 \},\
  expenses: \{ rent: 0, rates: 0, incomeTax: 0, vehicle: 0, travelling: 0, electricity: 0, water: 0, gas: 0, telephone: 0, medical: 0, educational: 0, donations: 0, otherExpenses: 0 \},\
  wealth: \{ propertyPreviousYear: 0, propertyCurrentYear: 0, investmentPreviousYear: 0, investmentCurrentYear: 0, vehiclePreviousYear: 0, vehicleCurrentYear: 0, jewelryPreviousYear: 0, jewelryCurrentYear: 0, cashPreviousYear: 0, cashCurrentYear: 0, pfPreviousYear: 0, pfCurrentYear: 0, loanPreviousYear: 0, loanCurrentYear: 0 \}\
\});\
\
//--- AUTH COMPONENTS ---\
const LoginRegister = (\{ onLogin, users, setUsers \}) => \{\
  const [isLogin, setIsLogin] = useState(true);\
  const [formData, setFormData] = useState(\{ email: "", password: "", name: "", confirmPassword: "" \});\
  const [error, setError] = useState("");\
  const [isLoading, setIsLoading] = useState(false);\
\
  const handleSubmit = () => \{\
    setError("");\
    setIsLoading(true);\
\
    // Basic validation\
    if (!formData.email || !formData.password) \{\
      setError("Please fill in all required fields");\
      setIsLoading(false);\
      return;\
    \}\
\
    if (!isLogin && !formData.name) \{\
      setError("Please enter your full name");\
      setIsLoading(false);\
      return;\
    \}\
\
    setTimeout(() => \{\
      if (isLogin) \{\
        const user = users.find(u => u.email.toLowerCase() === formData.email.toLowerCase() && u.password === formData.password);\
        if (user) \{\
          onLogin(user);\
        \} else \{\
          setError("Invalid email or password");\
        \}\
      \} else \{\
        if (formData.password !== formData.confirmPassword) \{\
          setError("Passwords don't match");\
          setIsLoading(false);\
          return;\
        \}\
        if (users.find(u => u.email === formData.email)) \{\
          setError("Email already exists");\
          setIsLoading(false);\
          return;\
        \}\
        if (formData.password.length < 6) \{\
          setError("Password must be at least 6 characters");\
          setIsLoading(false);\
          return;\
        \}\
\
        const newUser = \{\
          id: Date.now(),\
          email: formData.email,\
          name: formData.name,\
          password: formData.password,\
          role: formData.email === "admin@tax.pk" ? "admin" : "user",\
          createdAt: new Date().toISOString(),\
          taxData: getDefaultTaxData()\
        \};\
        \
        setUsers([...users, newUser]);\
        onLogin(newUser);\
      \}\
      setIsLoading(false);\
    \}, 100);\
  \};\
\
  const quickLogin = (userEmail) => \{\
    const user = users.find(u => u.email === userEmail);\
    if (user) \{\
      onLogin(user);\
    \}\
  \};\
\
  return (\
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">\
      <div className="bg-white rounded-xl shadow-2xl w-full max-w-md p-8">\
        <div className="text-center mb-8">\
          <div className="bg-blue-600 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">\
            <Calculator className="w-8 h-8 text-white" />\
          </div>\
          <h1 className="text-2xl font-bold text-gray-900">Pakistani Tax Advisor Pro</h1>\
          <p className="text-gray-600 mt-2">\{isLogin ? "Sign in to your account" : "Create your account"\}</p>\
          <div className="text-xs text-green-600 mt-1">\uc0\u10024  Now with Excel/PDF Export & AI Tax Suggestions!</div>\
        </div>\
\
        <div className="space-y-4">\
          \{!isLogin && (\
            <div>\
              <label className="block text-sm font-medium text-gray-700 mb-1">Full Name</label>\
              <div className="relative">\
                <User className="w-5 h-5 text-gray-400 absolute left-3 top-2.5" />\
                <input\
                  type="text"\
                  required\
                  value=\{formData.name\}\
                  onChange=\{(e) => setFormData(\{...formData, name: e.target.value\})\}\
                  onKeyPress=\{(e) => e.key === 'Enter' && handleSubmit()\}\
                  className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"\
                  placeholder="Enter your full name"\
                />\
              </div>\
            </div>\
          )\}\
\
          <div>\
            <label className="block text-sm font-medium text-gray-700 mb-1">Email</label>\
            <div className="relative">\
              <Mail className="w-5 h-5 text-gray-400 absolute left-3 top-2.5" />\
              <input\
                type="email"\
                required\
                value=\{formData.email\}\
                onChange=\{(e) => setFormData(\{...formData, email: e.target.value\})\}\
                onKeyPress=\{(e) => e.key === 'Enter' && handleSubmit()\}\
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"\
                placeholder="Enter your email"\
              />\
            </div>\
          </div>\
\
          <div>\
            <label className="block text-sm font-medium text-gray-700 mb-1">Password</label>\
            <div className="relative">\
              <Lock className="w-5 h-5 text-gray-400 absolute left-3 top-2.5" />\
              <input\
                type="password"\
                required\
                value=\{formData.password\}\
                onChange=\{(e) => setFormData(\{...formData, password: e.target.value\})\}\
                onKeyPress=\{(e) => e.key === 'Enter' && handleSubmit()\}\
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"\
                placeholder="Enter your password"\
              />\
            </div>\
          </div>\
\
          \{!isLogin && (\
            <div>\
              <label className="block text-sm font-medium text-gray-700 mb-1">Confirm Password</label>\
              <div className="relative">\
                <Lock className="w-5 h-5 text-gray-400 absolute left-3 top-2.5" />\
                <input\
                  type="password"\
                  required\
                  value=\{formData.confirmPassword\}\
                  onChange=\{(e) => setFormData(\{...formData, confirmPassword: e.target.value\})\}\
                  onKeyPress=\{(e) => e.key === 'Enter' && handleSubmit()\}\
                  className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"\
                  placeholder="Confirm your password"\
                />\
              </div>\
            </div>\
          )\}\
\
          \{error && (\
            <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg text-sm">\
              \{error\}\
            </div>\
          )\}\
\
          <button\
            onClick=\{handleSubmit\}\
            disabled=\{isLoading\}\
            className="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white font-medium py-2 px-4 rounded-lg transition-colors flex items-center justify-center"\
          >\
            \{isLoading ? (\
              <>\
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>\
                Signing In...\
              </>\
            ) : (\
              isLogin ? "Sign In" : "Create Account"\
            )\}\
          </button>\
        </div>\
\
        <div className="mt-6 text-center">\
          <button\
            onClick=\{() => \{\
              setIsLogin(!isLogin);\
              setError("");\
              setFormData(\{ email: "", password: "", name: "", confirmPassword: "" \});\
            \}\}\
            className="text-blue-600 hover:text-blue-700 text-sm font-medium"\
          >\
            \{isLogin ? "Don't have an account? Sign up" : "Already have an account? Sign in"\}\
          </button>\
        </div>\
\
        \{isLogin && (\
          <div className="mt-4 p-4 bg-gray-50 rounded-lg text-xs text-gray-600">\
            <p className="font-semibold mb-3">Demo Accounts:</p>\
            \
            <div className="space-y-3">\
              <div className="bg-white p-3 rounded border">\
                <div className="flex justify-between items-center">\
                  <div>\
                    <p className="font-medium text-gray-900">Admin Account</p>\
                    <p className="text-xs">admin@tax.pk / admin123</p>\
                  </div>\
                  <button\
                    type="button"\
                    onClick=\{() => quickLogin("admin@tax.pk")\}\
                    className="bg-blue-600 hover:bg-blue-700 text-white text-xs px-3 py-1 rounded"\
                  >\
                    Quick Login\
                  </button>\
                </div>\
              </div>\
              \
              <div className="bg-white p-3 rounded border">\
                <div className="flex justify-between items-center">\
                  <div>\
                    <p className="font-medium text-gray-900">Demo User</p>\
                    <p className="text-xs">user@demo.pk / user123</p>\
                  </div>\
                  <button\
                    type="button"\
                    onClick=\{() => quickLogin("user@demo.pk")\}\
                    className="bg-green-600 hover:bg-green-700 text-white text-xs px-3 py-1 rounded"\
                  >\
                    Quick Login\
                  </button>\
                </div>\
              </div>\
            </div>\
          </div>\
        )\}\
      </div>\
    </div>\
  );\
\};\
\
//--- AI SUGGESTIONS PANEL ---\
const AISuggestionsPanel = (\{ taxData, isVisible, setIsVisible \}) => \{\
  const [suggestions, setSuggestions] = useState([]);\
  const [isLoading, setIsLoading] = useState(false);\
\
  const generateSuggestions = () => \{\
    setIsLoading(true);\
    setTimeout(() => \{\
      const newSuggestions = TaxAdvisor.analyzeForSavings(taxData);\
      setSuggestions(newSuggestions);\
      setIsLoading(false);\
    \}, 1000);\
  \};\
\
  if (!isVisible) return null;\
\
  return (\
    <div className="fixed top-20 right-6 bg-white border-2 border-green-200 rounded-lg shadow-xl z-50 w-80">\
      <div className="bg-green-50 px-4 py-2 rounded-t-lg border-b flex justify-between items-center">\
        <div className="flex items-center space-x-2">\
          <Bot className="w-4 h-4 text-green-600" />\
          <span className="font-semibold text-green-900 text-sm">AI Tax Advisor</span>\
        </div>\
        <div className="flex space-x-1">\
          <button \
            onClick=\{generateSuggestions\}\
            disabled=\{isLoading\}\
            className="p-1 hover:bg-green-100 rounded"\
          >\
            <Lightbulb className="w-4 h-4 text-green-600" />\
          </button>\
          <button onClick=\{() => setIsVisible(false)\} className="p-1 hover:bg-green-100 rounded">\
            <X className="w-4 h-4 text-green-600" />\
          </button>\
        </div>\
      </div>\
      <div className="p-4 max-h-96 overflow-y-auto">\
        \{isLoading ? (\
          <div className="text-center py-4">\
            <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-green-600 mx-auto mb-2"></div>\
            <p className="text-sm text-gray-600">Analyzing your tax data...</p>\
          </div>\
        ) : suggestions.length > 0 ? (\
          <div className="space-y-3">\
            \{suggestions.map((suggestion, index) => (\
              <div key=\{index\} className="bg-yellow-50 border border-yellow-200 rounded-lg p-3">\
                <h4 className="font-semibold text-yellow-800 text-sm mb-1">\{suggestion.title\}</h4>\
                <p className="text-xs text-yellow-700 mb-2">\{suggestion.description\}</p>\
                \{typeof suggestion.potential_saving === 'number' && (\
                  <div className="text-xs font-semibold text-green-700">\
                    Potential Saving: \{currency(suggestion.potential_saving)\}\
                  </div>\
                )\}\
              </div>\
            ))\}\
          </div>\
        ) : (\
          <div className="text-center py-4">\
            <Lightbulb className="w-8 h-8 text-gray-300 mx-auto mb-2" />\
            <p className="text-sm text-gray-600">Click the lightbulb to get AI tax optimization suggestions!</p>\
          </div>\
        )\}\
      </div>\
    </div>\
  );\
\};\
\
//--- FILE IMPORT/EXPORT PANEL ---\
const FilePanel = (\{ userData, taxSummary, onImport \}) => \{\
  const [showPanel, setShowPanel] = useState(false);\
  const [importing, setImporting] = useState(false);\
\
  const handleFileImport = (event) => \{\
    const file = event.target.files[0];\
    if (file) \{\
      setImporting(true);\
      FileOperations.importFromFile(\
        file,\
        (taxData) => \{\
          onImport(taxData);\
          setImporting(false);\
          alert("Tax data imported successfully!");\
        \},\
        (error) => \{\
          setImporting(false);\
          alert("Import failed: " + error);\
        \}\
      );\
    \}\
  \};\
\
  return (\
    <div className="fixed top-20 left-6 z-50">\
      <button\
        onClick=\{() => setShowPanel(!showPanel)\}\
        className="bg-purple-600 hover:bg-purple-700 text-white p-3 rounded-lg shadow-lg flex items-center gap-2"\
      >\
        <FileSpreadsheet className="w-5 h-5" />\
        Files\
      </button>\
      \
      \{showPanel && (\
        <div className="mt-2 bg-white border rounded-lg shadow-xl p-4 w-64">\
          <h3 className="font-semibold text-gray-900 mb-3">File Operations</h3>\
          \
          <div className="space-y-2">\
            <button\
              onClick=\{() => FileOperations.exportToExcel(userData)\}\
              className="w-full bg-green-600 hover:bg-green-700 text-white px-3 py-2 rounded text-sm flex items-center gap-2"\
            >\
              <Download className="w-4 h-4" />\
              Export to Excel\
            </button>\
            \
            <button\
              onClick=\{() => FileOperations.exportToPDF(userData, taxSummary)\}\
              className="w-full bg-red-600 hover:bg-red-700 text-white px-3 py-2 rounded text-sm flex items-center gap-2"\
            >\
              <Download className="w-4 h-4" />\
              Export to PDF\
            </button>\
            \
            <div className="border-t pt-2">\
              <label className="w-full bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded text-sm flex items-center gap-2 cursor-pointer">\
                <Upload className="w-4 h-4" />\
                \{importing ? "Importing..." : "Import Data"\}\
                <input\
                  type="file"\
                  accept=".json,.xlsx,.xls"\
                  onChange=\{handleFileImport\}\
                  disabled=\{importing\}\
                  className="hidden"\
                />\
              </label>\
            </div>\
          </div>\
        </div>\
      )\}\
    </div>\
  );\
\};\
\
//--- ADMIN PANEL ---\
const AdminPanel = (\{ users, setUsers, onBackToCalculator \}) => \{\
  const [selectedUser, setSelectedUser] = useState(null);\
\
  const deleteUser = (userId) => \{\
    if (window.confirm("Are you sure you want to delete this user?")) \{\
      setUsers(users.filter(u => u.id !== userId));\
      setSelectedUser(null);\
    \}\
  \};\
\
  const calculateUserTax = (userData) => \{\
    const incFields = ["monthlySalary", "bonus", "carAllowance", "otherTaxable"];\
    const totalIncome = sumFields(userData.income, incFields);\
    const taxableIncome = totalIncome - (+userData.deductions.zakat || 0);\
    const normalTax = TaxEngine.calcNormalTax(taxableIncome);\
    return \{ totalIncome, taxableIncome, normalTax \};\
  \};\
\
  return (\
    <div className="min-h-screen bg-gray-50">\
      <div className="bg-white border-b shadow-sm">\
        <div className="px-6 py-4 flex justify-between items-center">\
          <div>\
            <h1 className="text-2xl font-bold text-gray-900 flex items-center gap-2">\
              <Shield className="w-6 h-6 text-blue-600" />\
              Admin Dashboard\
            </h1>\
            <p className="text-sm text-gray-600 mt-1">Manage users and view tax calculations</p>\
          </div>\
          <button\
            onClick=\{onBackToCalculator\}\
            className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center gap-2"\
          >\
            <Calculator className="w-4 h-4" />\
            Back to Calculator\
          </button>\
        </div>\
      </div>\
\
      <div className="p-6">\
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">\
          <div className="lg:col-span-2">\
            <div className="bg-white rounded-lg shadow">\
              <div className="p-4 border-b">\
                <h2 className="text-lg font-semibold flex items-center gap-2">\
                  <Users className="w-5 h-5" />\
                  All Users (\{users.length\})\
                </h2>\
              </div>\
              <div className="overflow-x-auto">\
                <table className="w-full">\
                  <thead className="bg-gray-50">\
                    <tr>\
                      <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">User</th>\
                      <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Role</th>\
                      <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Total Income</th>\
                      <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Tax Liability</th>\
                      <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>\
                    </tr>\
                  </thead>\
                  <tbody className="divide-y divide-gray-200">\
                    \{users.map(user => \{\
                      const \{ totalIncome, normalTax \} = calculateUserTax(user.taxData);\
                      return (\
                        <tr key=\{user.id\} className="hover:bg-gray-50">\
                          <td className="px-4 py-3">\
                            <div>\
                              <div className="font-medium text-gray-900">\{user.name\}</div>\
                              <div className="text-sm text-gray-500">\{user.email\}</div>\
                            </div>\
                          </td>\
                          <td className="px-4 py-3">\
                            <span className=\{`inline-flex px-2 py-1 text-xs font-semibold rounded-full $\{\
                              user.role === 'admin' ? 'bg-purple-100 text-purple-800' : 'bg-green-100 text-green-800'\
                            \}`\}>\
                              \{user.role\}\
                            </span>\
                          </td>\
                          <td className="px-4 py-3 text-sm text-gray-900">\{currency(totalIncome)\}</td>\
                          <td className="px-4 py-3 text-sm text-gray-900">\{currency(normalTax)\}</td>\
                          <td className="px-4 py-3">\
                            <div className="flex space-x-2">\
                              <button\
                                onClick=\{() => setSelectedUser(user)\}\
                                className="text-blue-600 hover:text-blue-800 text-sm font-medium"\
                              >\
                                View Details\
                              </button>\
                              \{user.role !== 'admin' && (\
                                <button\
                                  onClick=\{() => deleteUser(user.id)\}\
                                  className="text-red-600 hover:text-red-800 text-sm font-medium"\
                                >\
                                  Delete\
                                </button>\
                              )\}\
                            </div>\
                          </td>\
                        </tr>\
                      );\
                    \})\}\
                  </tbody>\
                </table>\
              </div>\
            </div>\
          </div>\
\
          <div>\
            <div className="bg-white rounded-lg shadow">\
              <div className="p-4 border-b">\
                <h2 className="text-lg font-semibold">User Details</h2>\
              </div>\
              <div className="p-4">\
                \{selectedUser ? (\
                  <div className="space-y-4">\
                    <div>\
                      <h3 className="font-medium text-gray-900">\{selectedUser.name\}</h3>\
                      <p className="text-sm text-gray-500">\{selectedUser.email\}</p>\
                      <p className="text-xs text-gray-400">Joined: \{new Date(selectedUser.createdAt).toLocaleDateString()\}</p>\
                    </div>\
                    \
                    <div className="border-t pt-4">\
                      <h4 className="font-medium text-gray-900 mb-2">Tax Summary</h4>\
                      \{(() => \{\
                        const \{ totalIncome, taxableIncome, normalTax \} = calculateUserTax(selectedUser.taxData);\
                        return (\
                          <div className="space-y-2 text-sm">\
                            <div className="flex justify-between">\
                              <span>Total Income:</span>\
                              <span className="font-mono">\{currency(totalIncome)\}</span>\
                            </div>\
                            <div className="flex justify-between">\
                              <span>Taxable Income:</span>\
                              <span className="font-mono">\{currency(taxableIncome)\}</span>\
                            </div>\
                            <div className="flex justify-between border-t pt-2">\
                              <span>Tax Liability:</span>\
                              <span className="font-mono font-semibold">\{currency(normalTax)\}</span>\
                            </div>\
                          </div>\
                        );\
                      \})()\}\
                    </div>\
                  </div>\
                ) : (\
                  <p className="text-gray-500 text-center py-8">Select a user to view details</p>\
                )\}\
              </div>\
            </div>\
\
            <div className="bg-white rounded-lg shadow mt-6">\
              <div className="p-4 border-b">\
                <h2 className="text-lg font-semibold">System Statistics</h2>\
              </div>\
              <div className="p-4 space-y-3">\
                <div className="flex justify-between">\
                  <span>Total Users:</span>\
                  <span className="font-semibold">\{users.length\}</span>\
                </div>\
                <div className="flex justify-between">\
                  <span>Admin Users:</span>\
                  <span className="font-semibold">\{users.filter(u => u.role === 'admin').length\}</span>\
                </div>\
                <div className="flex justify-between">\
                  <span>Regular Users:</span>\
                  <span className="font-semibold">\{users.filter(u => u.role === 'user').length\}</span>\
                </div>\
              </div>\
            </div>\
          </div>\
        </div>\
      </div>\
    </div>\
  );\
\};\
\
//--- REUSABLE INPUTS ---\
const ExcelCell = (\{ value, onChange, type = "number", ...props \}) => (\
  <input \
    type=\{type\} \
    value=\{value === null || value === undefined ? "" : value\} \
    onChange=\{e => \{\
      if (type === "number") \{\
        const numValue = e.target.value === "" ? 0 : parseFloat(e.target.value);\
        onChange?.(isNaN(numValue) ? 0 : numValue);\
      \} else \{\
        onChange?.(e.target.value);\
      \}\
    \}\}\
    className=\{`w-full h-8 px-2 border border-gray-300 text-sm $\{props.readOnly ? "bg-gray-50" : "bg-white"\} $\{props.className || ""\}`\}\
  />\
);\
\
const YesNoDropdown = (\{ value, onChange, ...props \}) => (\
  <select \
    value=\{value || ""\} \
    onChange=\{e => onChange?.(e.target.value)\}\
    className=\{`w-full h-8 px-2 border border-gray-300 text-sm bg-white $\{props.className || ""\}`\}\
  >\
    <option value="">Select</option>\
    <option value="Y">Y</option>\
    <option value="N">N</option>\
  </select>\
);\
\
//--- CONFIGS FOR EACH SHEET ---\
const configs = \{\
  income: [\
    ["Monthly Salary", "monthlySalary"],\
    ["Bonus", "bonus"],\
    ["Taxable value of Car", "carAllowance"],\
    ["Other taxable payments", "otherTaxable"],\
    ["Salary Tax Deducted", "salaryTaxDeducted"],\
    ["Do You have more than one employer?", "multipleEmployer", "dropdown"],\
    ["Additional Tax Deducted", "additionalTaxDeducted", "number", "conditional", "multipleEmployer", "Y"],\
    ["Medical Allowance", "medicalAllowance"],\
    ["Employer Contribution", "employerContribution"],\
    ["Other Exempt", "otherExempt"],\
    ["Other Sources", "otherSources"],\
  ],\
  adjustableTax: [\
    ["Profit on Debt u/s 151 @15%", "profitOnDebt"],\
    ["Profit on Debt Tax Collected", "profitOnDebtTax"],\
    ["Electricity Bill (Domestic)", "electricityBill"],\
    ["Electricity Tax Collected", "electricityTax"],\
    ["Telephone/Internet Bill", "phoneBill"],\
    ["Telephone/Internet Tax", "phoneTax"],\
    ["Vehicle Registration/Transfer", "vehicleAmount"],\
    ["Vehicle Tax Collected", "vehicleTax"],\
    ["Other Adjustable Tax", "otherTax"],\
  ],\
  reductions: [\
    ["Teacher's Amount", "teacherAmount"],\
    ["Teacher Reduction", "teacherReduction"],\
    ["Behbood Reduction", "behboodReduction"]\
  ],\
  credits: [\
    ["Charitable Donation", "charitableDonation"],\
    ["Pension Contribution", "pensionContribution"]\
  ],\
  deductions: [\
    ["Zakat", "zakat"]\
  ],\
  finalTax: [\
    ["Sukuk Amount", "sukukAmount"],\
    ["Debt Amount", "debtAmount"]\
  ],\
  capitalGain: [\
    ["Property (1 yr)", "property1Year"],\
    ["Property (1 yr) Tax Deducted", "property1YearTaxDeducted"],\
    ["Property (2-3 yrs)", "property2_3Years"],\
    ["Property (2-3 yrs) Tax Deducted", "property2_3YearsTaxDeducted"],\
    ["Securities", "securities"],\
    ["Securities Tax Deducted", "securitiesTaxDeducted"]\
  ],\
  expenses: [\
    ["Rent", "rent"], ["Rates", "rates"], ["Income Tax Paid", "incomeTax"], ["Vehicle", "vehicle"],\
    ["Travelling", "travelling"], ["Electricity", "electricity"], ["Water", "water"], ["Gas", "gas"],\
    ["Telephone", "telephone"], ["Medical", "medical"], ["Educational", "educational"], ["Donations", "donations"],\
    ["Other Expenses", "otherExpenses"]\
  ],\
  wealth: [\
    ["Property Previous", "propertyPreviousYear"], ["Property Current", "propertyCurrentYear"],\
    ["Investment Previous", "investmentPreviousYear"], ["Investment Current", "investmentCurrentYear"],\
    ["Vehicle Previous", "vehiclePreviousYear"], ["Vehicle Current", "vehicleCurrentYear"],\
    ["Jewelry Previous", "jewelryPreviousYear"], ["Jewelry Current", "jewelryCurrentYear"],\
    ["Cash Previous", "cashPreviousYear"], ["Cash Current", "cashCurrentYear"],\
    ["PF Previous", "pfPreviousYear"], ["PF Current", "pfCurrentYear"],\
    ["Loan Previous", "loanPreviousYear"], ["Loan Current", "loanCurrentYear"]\
  ]\
\};\
\
//--- GENERIC GRID SHEET ---\
function GridSheet(\{ section, config, data, onChange \}) \{\
  return (\
    <div className="p-4 bg-white">\
      <div className="grid grid-cols-2 gap-1 text-sm max-w-xl">\
        <div className="font-bold bg-blue-50 p-2 border col-span-2 capitalize">\
          <span>\{section.replace(/([A-Z])/g, ' $1')\} Sheet</span>\
          <div className="text-xs text-gray-600 mt-1">Enhanced with AI suggestions and file operations</div>\
        </div>\
        \{config.map(([label, key, type, special, condField, condValue]) =>\
          special === "conditional" && data[condField] !== condValue ? null : (\
            <React.Fragment key=\{key\}>\
              <div className="p-2 border">\{label\}</div>\
              \{type === "dropdown" ?\
                <YesNoDropdown value=\{data[key]\} onChange=\{v => onChange(section, key, v)\} /> :\
                <ExcelCell value=\{data[key]\} type=\{type || "number"\} onChange=\{v => onChange(section, key, v)\} />\
              \}\
            </React.Fragment>\
          )\
        )\}\
      </div>\
    </div>\
  );\
\}\
\
//--- FLOATING SUMMARY ---\
const FloatingSummary = (\{ data, isVisible, setIsVisible \}) => \{\
  const incFields = ["monthlySalary", "bonus", "carAllowance", "otherTaxable"];\
  const totalIncome = sumFields(data.income, incFields);\
  const taxableIncome = totalIncome - (+data.deductions.zakat || 0);\
  const normalTax = TaxEngine.calcNormalTax(taxableIncome);\
  const finalTax = TaxEngine.calcFinalTax(+data.finalTax.sukukAmount || 0, 0.10) + TaxEngine.calcFinalTax(+data.finalTax.debtAmount || 0, 0.15);\
  const capitalGainTax = (+data.capitalGain.property1Year || 0)*0.15 + (+data.capitalGain.property2_3Years || 0)*0.10 + (+data.capitalGain.securities || 0)*0.125;\
  const taxReductions = sumFields(data.reductions, ["teacherReduction", "behboodReduction"]);\
  const taxCredits = TaxEngine.calcTaxCredit(+data.credits.charitableDonation || 0, taxableIncome, 1) +\
    TaxEngine.calcTaxCredit(+data.credits.pensionContribution || 0, taxableIncome, 1);\
  const totalTaxChargeable = Math.max(0, normalTax - taxReductions - taxCredits) + finalTax + capitalGainTax;\
  const taxPaid = (+data.income.salaryTaxDeducted || 0) + (data.income.multipleEmployer === "Y" ? +data.income.additionalTaxDeducted || 0 : 0)\
    + sumFields(data.capitalGain, ["property1YearTaxDeducted", "property2_3YearsTaxDeducted", "securitiesTaxDeducted"]);\
  const refundDemand = taxPaid - totalTaxChargeable;\
  const wealthFields = ["propertyCurrentYear", "investmentCurrentYear", "vehicleCurrentYear", "jewelryCurrentYear", "cashCurrentYear", "pfCurrentYear"];\
  const netWorth = sumFields(data.wealth, wealthFields) - (+data.wealth.loanCurrentYear || 0);\
  const [isMinimized, setIsMinimized] = useState(false);\
  \
  if (!isVisible) return (\
    <button onClick=\{() => setIsVisible(true)\} className="fixed bottom-6 right-6 bg-blue-600 hover:bg-blue-700 text-white p-3 rounded-full shadow-lg z-50">\
      <Eye className="w-5 h-5" />\
    </button>\
  );\
  \
  return (\
    <div className="fixed bottom-6 right-6 bg-white border-2 border-blue-200 rounded-lg shadow-xl z-50 w-80">\
      <div className="bg-blue-50 px-4 py-2 rounded-t-lg border-b flex justify-between items-center">\
        <div className="flex items-center space-x-2">\
          <Calculator className="w-4 h-4 text-blue-600" />\
          <span className="font-semibold text-blue-900 text-sm">Tax Summary</span>\
        </div>\
        <div className="flex space-x-1">\
          <button onClick=\{() => setIsMinimized(!isMinimized)\} className="p-1 hover:bg-blue-100 rounded">\
            \{isMinimized ? <Maximize2 className="w-4 h-4 text-blue-600" /> : <Minimize2 className="w-4 h-4 text-blue-600" />\}\
          </button>\
          <button onClick=\{() => setIsVisible(false)\} className="p-1 hover:bg-blue-100 rounded">\
            <X className="w-4 h-4 text-blue-600" />\
          </button>\
        </div>\
      </div>\
      \{!isMinimized && (\
        <div className="p-4 space-y-3 text-xs">\
          <div className="bg-green-50 p-2 rounded">\
            <div className="font-semibold text-green-800 mb-1">Income</div>\
            <div className="flex justify-between"><span>Total Salary:</span><span className="font-mono">\{currency(totalIncome)\}</span></div>\
            <div className="flex justify-between"><span>Taxable Income:</span><span className="font-mono font-semibold">\{currency(taxableIncome)\}</span></div>\
          </div>\
          <div className="bg-yellow-50 p-2 rounded">\
            <div className="font-semibold text-yellow-800 mb-1">Tax Calculation</div>\
            <div className="flex justify-between"><span>Normal Tax:</span><span className="font-mono">\{currency(normalTax)\}</span></div>\
            <div className="flex justify-between"><span>Final Tax:</span><span className="font-mono">\{currency(finalTax)\}</span></div>\
            <div className="flex justify-between"><span>Capital Gain Tax:</span><span className="font-mono">\{currency(capitalGainTax)\}</span></div>\
            <div className="flex justify-between text-xs text-gray-600"><span>Less: Reductions/Credits:</span><span className="font-mono">\{currency(taxReductions + taxCredits)\}</span></div>\
            <div className="border-t pt-1 mt-1"><div className="flex justify-between font-semibold"><span>Total Tax Chargeable:</span><span className="font-mono text-yellow-800">\{currency(totalTaxChargeable)\}</span></div></div>\
          </div>\
          <div className=\{`p-2 rounded $\{refundDemand >= 0 ? 'bg-green-50' : 'bg-red-50'\}`\}>\
            <div className=\{`font-semibold mb-1 $\{refundDemand >= 0 ? 'text-green-800' : 'text-red-800'\}`\}>Payment Status</div>\
            <div className="flex justify-between"><span>Tax Paid:</span><span className="font-mono">\{currency(taxPaid)\}</span></div>\
            <div className="border-t pt-1 mt-1">\
              <div className="flex justify-between font-semibold"><span>\{refundDemand >= 0 ? 'Refund Due:' : 'Additional Tax:'\}</span>\
                <span className=\{`font-mono $\{refundDemand >= 0 ? 'text-green-800' : 'text-red-800'\}`\}>\{currency(Math.abs(refundDemand))\}</span>\
              </div>\
            </div>\
          </div>\
          <div className="bg-blue-50 p-2 rounded">\
            <div className="font-semibold text-blue-800 mb-1">Wealth</div>\
            <div className="flex justify-between"><span>Net Worth:</span><span className="font-mono font-semibold text-blue-800">\{currency(netWorth)\}</span></div>\
          </div>\
          <div className="bg-gray-50 p-2 rounded text-center">\
            <div className="text-gray-600">Effective Tax Rate</div>\
            <div className="font-semibold text-gray-800">\{taxableIncome > 0 ? ((totalTaxChargeable / taxableIncome) * 100).toFixed(2) : 0\}%</div>\
          </div>\
        </div>\
      )\}\
    </div>\
  );\
\};\
\
//--- TAX CALCULATOR COMPONENT ---\
const TaxCalculator = (\{ currentUser, users, setUsers, onLogout, onSwitchToAdmin \}) => \{\
  const [activeTab, setActiveTab] = useState("income");\
  const [summaryVisible, setSummaryVisible] = useState(true);\
  const [aiSuggestionsVisible, setAiSuggestionsVisible] = useState(false);\
\
  const updateField = (section, key, value) => \{\
    const updatedUsers = users.map(user => \
      user.id === currentUser.id \
        ? \{ ...user, taxData: \{ ...user.taxData, [section]: \{ ...user.taxData[section], [key]: value \} \} \}\
        : user\
    );\
    setUsers(updatedUsers);\
  \};\
\
  const handleDataImport = (importedTaxData) => \{\
    const updatedUsers = users.map(user => \
      user.id === currentUser.id \
        ? \{ ...user, taxData: importedTaxData \}\
        : user\
    );\
    setUsers(updatedUsers);\
  \};\
\
  // Get current user data and tax summary for file operations\
  const currentUserFromArray = users.find(u => u.id === currentUser.id);\
  const currentUserData = currentUserFromArray ? currentUserFromArray.taxData : getDefaultTaxData();\
  \
  const incFields = ["monthlySalary", "bonus", "carAllowance", "otherTaxable"];\
  const totalIncome = sumFields(currentUserData.income, incFields);\
  const taxableIncome = totalIncome - (+currentUserData.deductions.zakat || 0);\
  const normalTax = TaxEngine.calcNormalTax(taxableIncome);\
  const finalTax = TaxEngine.calcFinalTax(+currentUserData.finalTax.sukukAmount || 0, 0.10) + TaxEngine.calcFinalTax(+currentUserData.finalTax.debtAmount || 0, 0.15);\
  const capitalGainTax = (+currentUserData.capitalGain.property1Year || 0)*0.15 + (+currentUserData.capitalGain.property2_3Years || 0)*0.10 + (+currentUserData.capitalGain.securities || 0)*0.125;\
  const taxReductions = sumFields(currentUserData.reductions, ["teacherReduction", "behboodReduction"]);\
  const taxCredits = TaxEngine.calcTaxCredit(+currentUserData.credits.charitableDonation || 0, taxableIncome, 1) + TaxEngine.calcTaxCredit(+currentUserData.credits.pensionContribution || 0, taxableIncome, 1);\
  const totalTaxChargeable = Math.max(0, normalTax - taxReductions - taxCredits) + finalTax + capitalGainTax;\
  const taxPaid = (+currentUserData.income.salaryTaxDeducted || 0) + (currentUserData.income.multipleEmployer === "Y" ? +currentUserData.income.additionalTaxDeducted || 0 : 0) + sumFields(currentUserData.capitalGain, ["property1YearTaxDeducted", "property2_3YearsTaxDeducted", "securitiesTaxDeducted"]);\
  const refundDemand = taxPaid - totalTaxChargeable;\
\
  const taxSummary = \{ totalIncome, taxableIncome, normalTax, totalTaxChargeable, taxPaid, refundDemand \};\
\
  const tabs = [\
    \{ id: "income", name: "Income", icon: DollarSign \},\
    \{ id: "adjustableTax", name: "Adjustable Tax", icon: FileText \},\
    \{ id: "finalTax", name: "Final Tax", icon: Receipt \},\
    \{ id: "capitalGain", name: "Capital Gain", icon: TrendingUp \},\
    \{ id: "reductions", name: "Reductions", icon: Building \},\
    \{ id: "credits", name: "Credits", icon: Building \},\
    \{ id: "deductions", name: "Deductions", icon: Building \},\
    \{ id: "expenses", name: "Expenses", icon: PieChart \},\
    \{ id: "wealth", name: "Wealth", icon: Wallet \},\
  ];\
\
  return (\
    <div className="min-h-screen bg-gray-50">\
      <div className="bg-white border-b shadow-sm">\
        <div className="px-6 py-4 flex justify-between items-center">\
          <div>\
            <h1 className="text-2xl font-bold text-gray-900">Pakistani Tax Advisor Pro</h1>\
            <p className="text-sm text-gray-600 mt-1">Professional Tax Return Calculation - Tax Year 2024-25</p>\
            <div className="text-xs text-green-600 mt-1 flex items-center gap-1">\
              <span>\uc0\u10024  Enhanced with AI suggestions, Excel/PDF export, and file import</span>\
            </div>\
          </div>\
          <div className="flex items-center space-x-4">\
            <button\
              onClick=\{() => setAiSuggestionsVisible(!aiSuggestionsVisible)\}\
              className="bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded text-sm flex items-center gap-1"\
            >\
              <Bot className="w-4 h-4" />\
              AI Advisor\
            </button>\
            <div className="text-right">\
              <div className="text-sm font-medium text-gray-900">\{currentUser.name\}</div>\
              <div className="text-xs text-gray-500">\{currentUser.email\}</div>\
            </div>\
            \{currentUser.role === 'admin' && (\
              <button\
                onClick=\{onSwitchToAdmin\}\
                className="bg-purple-600 hover:bg-purple-700 text-white px-3 py-1 rounded text-sm flex items-center gap-1"\
              >\
                <Shield className="w-4 h-4" />\
                Admin Panel\
              </button>\
            )\}\
            <button\
              onClick=\{onLogout\}\
              className="bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded text-sm flex items-center gap-1"\
            >\
              <LogOut className="w-4 h-4" />\
              Logout\
            </button>\
          </div>\
        </div>\
      </div>\
      \
      <div className="bg-white border-b">\
        <div className="px-6 flex space-x-1">\
          \{tabs.map((\{ id, name, icon: Icon \}) => (\
            <button key=\{id\} onClick=\{() => setActiveTab(id)\}\
              className=\{`flex items-center space-x-2 px-4 py-3 text-sm font-medium border-b-2 transition-colors $\{activeTab === id ? "border-blue-500 text-blue-600 bg-blue-50" : "border-transparent text-gray-600 hover:text-gray-900 hover:border-gray-300"\}`\}>\
              <Icon className="w-4 h-4" /><span>\{name\}</span>\
            </button>\
          ))\}\
        </div>\
      </div>\
      \
      <div className="flex-1 overflow-auto">\
        <GridSheet \
          section=\{activeTab\} \
          config=\{configs[activeTab]\} \
          data=\{currentUserData[activeTab]\} \
          onChange=\{updateField\}\
        />\
      </div>\
      \
      <FilePanel \
        userData=\{currentUserFromArray\} \
        taxSummary=\{taxSummary\}\
        onImport=\{handleDataImport\}\
      />\
      \
      <AISuggestionsPanel \
        taxData=\{currentUserData\}\
        isVisible=\{aiSuggestionsVisible\}\
        setIsVisible=\{setAiSuggestionsVisible\}\
      />\
      \
      <FloatingSummary data=\{currentUserData\} isVisible=\{summaryVisible\} setIsVisible=\{setSummaryVisible\} />\
    </div>\
  );\
\};\
\
//--- MAIN APP ---\
export default function TaxCalculatorApp() \{\
  const [currentUser, setCurrentUser] = useState(null);\
  const [currentView, setCurrentView] = useState('calculator');\
  const [users, setUsers] = useState([\
    \{\
      id: 1,\
      email: "admin@tax.pk",\
      name: "Tax Admin",\
      password: "admin123",\
      role: "admin",\
      createdAt: "2024-01-01T00:00:00Z",\
      taxData: \{\
        income: \{ monthlySalary: 7200000, bonus: 1500000, carAllowance: 50000, otherTaxable: 0, salaryTaxDeducted: 2200000, multipleEmployer: "", additionalTaxDeducted: 0, medicalAllowance: 400000, employerContribution: 100000, otherExempt: 0, otherSources: 0 \},\
        adjustableTax: \{ profitOnDebt: 0, profitOnDebtTax: 0, electricityBill: 0, electricityTax: 0, phoneBill: 0, phoneTax: 0, vehicleAmount: 0, vehicleTax: 0, otherTax: 0 \},\
        reductions: \{ teacherAmount: 0, teacherReduction: 581000, behboodReduction: 5000 \},\
        credits: \{ charitableDonation: 50000, pensionContribution: 500000 \},\
        deductions: \{ zakat: 10000 \},\
        finalTax: \{ sukukAmount: 500000, debtAmount: 100000 \},\
        capitalGain: \{ property1Year: 0, property1YearTaxDeducted: 0, property2_3Years: 0, property2_3YearsTaxDeducted: 0, securities: 0, securitiesTaxDeducted: 0 \},\
        expenses: \{ rent: 0, rates: 20000, incomeTax: 2200000, vehicle: 200000, travelling: 500000, electricity: 750000, water: 220000, gas: 80000, telephone: 24000, medical: 30000, educational: 500000, donations: 200000, otherExpenses: 5286000 \},\
        wealth: \{ propertyPreviousYear: 5000000, propertyCurrentYear: 5000000, investmentPreviousYear: 3000000, investmentCurrentYear: 2500000, vehiclePreviousYear: 2500000, vehicleCurrentYear: 2500000, jewelryPreviousYear: 1200000, jewelryCurrentYear: 1400000, cashPreviousYear: 500000, cashCurrentYear: 240000, pfPreviousYear: 2500000, pfCurrentYear: 2700000, loanPreviousYear: 500000, loanCurrentYear: 300000 \}\
      \}\
    \},\
    \{\
      id: 2,\
      email: "user@demo.pk",\
      name: "Demo User",\
      password: "user123",\
      role: "user",\
      createdAt: "2024-01-15T00:00:00Z",\
      taxData: \{\
        income: \{ monthlySalary: 5000000, bonus: 500000, carAllowance: 30000, otherTaxable: 0, salaryTaxDeducted: 1200000, multipleEmployer: "", additionalTaxDeducted: 0, medicalAllowance: 200000, employerContribution: 50000, otherExempt: 0, otherSources: 0 \},\
        adjustableTax: \{ profitOnDebt: 0, profitOnDebtTax: 0, electricityBill: 0, electricityTax: 0, phoneBill: 0, phoneTax: 0, vehicleAmount: 0, vehicleTax: 0, otherTax: 0 \},\
        reductions: \{ teacherAmount: 0, teacherReduction: 0, behboodReduction: 0 \},\
        credits: \{ charitableDonation: 25000, pensionContribution: 250000 \},\
        deductions: \{ zakat: 5000 \},\
        finalTax: \{ sukukAmount: 200000, debtAmount: 50000 \},\
        capitalGain: \{ property1Year: 0, property1YearTaxDeducted: 0, property2_3Years: 0, property2_3YearsTaxDeducted: 0, securities: 0, securitiesTaxDeducted: 0 \},\
        expenses: \{ rent: 0, rates: 10000, incomeTax: 1200000, vehicle: 100000, travelling: 200000, electricity: 400000, water: 120000, gas: 50000, telephone: 15000, medical: 20000, educational: 200000, donations: 100000, otherExpenses: 2000000 \},\
        wealth: \{ propertyPreviousYear: 2000000, propertyCurrentYear: 2200000, investmentPreviousYear: 1000000, investmentCurrentYear: 1200000, vehiclePreviousYear: 1500000, vehicleCurrentYear: 1400000, jewelryPreviousYear: 500000, jewelryCurrentYear: 600000, cashPreviousYear: 200000, cashCurrentYear: 150000, pfPreviousYear: 800000, pfCurrentYear: 900000, loanPreviousYear: 200000, loanCurrentYear: 100000 \}\
      \}\
    \}\
  ]);\
\
  const handleLogin = (user) => \{\
    setCurrentUser(user);\
  \};\
\
  const handleLogout = () => \{\
    setCurrentUser(null);\
    setCurrentView('calculator');\
  \};\
\
  const handleSwitchToAdmin = () => \{\
    setCurrentView('admin');\
  \};\
\
  const handleBackToCalculator = () => \{\
    setCurrentView('calculator');\
  \};\
\
  if (!currentUser) \{\
    return <LoginRegister onLogin=\{handleLogin\} users=\{users\} setUsers=\{setUsers\} />;\
  \}\
\
  if (currentView === 'admin' && currentUser.role === 'admin') \{\
    return <AdminPanel users=\{users\} setUsers=\{setUsers\} onBackToCalculator=\{handleBackToCalculator\} />;\
  \}\
\
  return (\
    <TaxCalculator\
      currentUser=\{currentUser\}\
      users=\{users\}\
      setUsers=\{setUsers\}\
      onLogout=\{handleLogout\}\
      onSwitchToAdmin=\{handleSwitchToAdmin\}\
    />\
  );\
\}}